Resources:
  LambdaSESRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  SesNotifications:
    Type: "AWS::SNS::Topic"
  SesNotificationsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt SesNotificationsLambda.Arn
      TopicArn: !Ref SesNotifications
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref SesNotificationsLambda
      Principal: sns.amazonaws.com
      SourceArn: !Ref SesNotifications


  SesNotificationsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Runtime: "python2.7"
      Timeout: 10
      Role: !GetAtt LambdaSESRole.Arn
      Code:
        ZipFile: !Sub |-
          from __future__ import print_function
          def lambda_handler(event, context):
              message = event['Records'][0]['Sns']['Message']
              print(message)
              return message
