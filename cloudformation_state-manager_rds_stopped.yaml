---
# RDS database can be shutdown only for 7 days.
# This automation doument ensures it stays in shutdown state

Parameters:
  RDSId:
    Type: String
    Description: RDS database identifier
Resources:
  AutomationDocumentAsumeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ssm.amazonaws.com
  AutomationDocumentRDSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AutomationDocumentRDSPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:StopDBInstance
              - rds:StopDBCluster
              - rds:DescribeDBClusters
            Resource: "*"
      Roles:
        - !Ref AutomationDocumentAsumeRole

  StateManagerRDSAssociation:
    DependsOn:
      - AutomationDocumentAsumeRole
      - AutomationDocumentRDSPolicy
    Type: AWS::SSM::Association
    Properties:
      AssociationName: EnsureRDSIsStopped
      Name: AWS-StopRdsInstance
      Parameters:
        InstanceId:
          - !Sub ${RDSId}
        AutomationAssumeRole:
          - !GetAtt AutomationDocumentAsumeRole.Arn
      ScheduleExpression: rate(1 day)

  StopDbClusterDocument:
    Type: "AWS::SSM::Document"
    Properties:
      Name: FOX-StopAuroraCluster
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: "Stop AuroraRDS cluster"
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          ClusterId:
            type: String
            description: (Required) RDS Instance Id to stop
          AutomationAssumeRole:
            type: String
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            default: ""
        mainSteps:
          -
            name: AssertNotStopped
            action: aws:assertAwsResourceProperty
            isCritical: false
            onFailure: step:StopCluster
            nextStep: CheckStop
            inputs:
              Service: rds
              Api: DescribeDBClusters
              DBClusterIdentifier: "{{ClusterId}}"
              PropertySelector: "$.DBClusters[0].Status"
              DesiredValues: ["stopped", "stopping"]
          -
            name: StopCluster
            action: aws:executeAwsApi
            inputs:
              Service: rds
              Api: StopDBCluster
              DBClusterIdentifier: "{{ClusterId}}"
          -
            name: CheckStop
            action: aws:waitForAwsResourceProperty
            onFailure: Abort
            maxAttempts: 10
            timeoutSeconds: 600
            inputs:
              Service: rds
              Api: DescribeDBClusters
              DBClusterIdentifier: "{{ClusterId}}"
              PropertySelector: "$.DBClusters[0].Status"
              DesiredValues: ["stopped"]